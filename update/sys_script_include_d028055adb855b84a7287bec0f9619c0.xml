<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_wcs_ctrx_auto_sv.AuthToken</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>AuthToken</name>
        <script><![CDATA[var AuthToken = Class.create();
AuthToken.prototype = {
    initialize: function() {
	
		this.TOKEN_HEADERS = {"Accept":"application/json","Content-Type":"application/json","Connection":"keep-alive","Host":"trust-us.citrixworkspacesapi.net"};
		this.TOKEN_ENDPOINT = 'https://trust-us.citrixworkspacesapi.net/{0}/tokens/clients';
		this.TOKEN_TIMEOUT = 10000;
		this.TOKEN_LIFETIME = 3300000;
		this.TOKEN_RETRY_MAX = 6;
		
    },
	
	testCredentials:function(clientId,clientSecret){
		var logger = new Logger();
		var customer_id = gs.getProperty('x_wcs_ctrx_auto_sv.customer_id');
		
		var rest = new RESTRequest();
		
        var body = {
			"ClientId":clientId,
			"ClientSecret":clientSecret
		};
        var endpoint = gs.getMessage(this.TOKEN_ENDPOINT,customer_id);
        logger.log(endpoint,"endpoint");
    
		var tokenResponse = rest.post(endpoint,this.TOKEN_HEADERS,body); 
		var tokenObj;
		try{
			tokenObj = JSON.parse(tokenResponse);
		}catch(error){
			logger.logError(tokenResponse);
			return "failure";
		}
		 
		if(tokenObj.token != null){
			logger.log("TOKEN",tokenObj.token);
			return "success";
		}else{
			logger.logError("Unable to get token");
			return "failure";
		}
		
	},
	getToken:function(){
		var logger = new Logger();
		var tokenRec = this._getCurrentToken();
		this._checkToken(tokenRec);
		
		
		//this._getNewToken();
	},
	
	
	_checkToken:function(tokenRec){
		var logger = new Logger();
		var newToken;
		
		var tokenState = tokenRec.getValue('state');
		logger.log('checking token');		
		
		if(tokenState == 'successful'){
			logger.log("Successful token check expired");
			
			if(this._tokenExpired(tokenRec.getValue('timestamp')) == true){
				
				logger.log('token Expired');
				return this._newTokenDriver();

			}else{
				logger.log('returning token ' + tokenRec.getValue('token'));
				return tokenRec.getValue('token');
			}
		}else if(tokenState == 'failed'){
			logger.log("Token is in Failed State retrying");	
			
			return this._newTokenDriver();
			
		}else if(tokenState == 'retrieving'){
			logger.log("Token  is currently being retrieved");
			
			this._wait(1000);
			return this.getToken();
		}else{
			logger.log("No Token");
			return this._newTokenDriver();
		}
		logger.log('token state ' + tokenState);
		
	},
	
	_newTokenDriver:function(){
		var logger = new Logger();
		
		var dt = new GlideDateTime();
		var newTimestamp = dt.getLocalDate() + " " + dt.getTime().toString().split(' ')[1];
		this._updateToken('','retrieving',newTimestamp);						
		var newToken = this._getNewToken();						
		return this._handleNewToken(newToken);
		
	},
	
	_tokenExpired:function(timestamp){
		var logger = new Logger();
		logger.log('checking expiration');
		var dt = new GlideDateTime();
		var tokents = new GlideDateTime(timestamp);

		var diff = dt.getNumericValue() - tokents.getNumericValue();
		if(diff >= this.TOKEN_LIFETIME){
			logger.log('THIS TOKEN IS EXPIRED');
			return true;
		}else{
			return false;
		}
	},
	_handleNewToken:function(newToken){
		var logger = new Logger();
		if(newToken == null){
			logger.logError("Received null token");
		}
		var dt = new GlideDateTime();
		var newTimestamp = dt.getLocalDate() + " " + dt.getTime().toString().split(' ')[1];
		
		if(newToken == null){
			this._updateToken('','failed',newTimestamp);
		}else{
			logger.log("token timestamp " + newTimestamp);				
			this._updateToken(newToken,'successful',newTimestamp);
		}	
		return newToken;
	},
	
	_getNewToken:function(){
		var logger = new Logger();
		
		var customer_id = gs.getProperty('x_wcs_ctrx_auto_sv.customer_id');
		var clientId = gs.getProperty('x_wcs_ctrx_auto_sv.client_id');
		var clientSecret = gs.getProperty('x_wcs_ctrx_auto_sv.client_secret');
		
		var rest = new RESTRequest();
		
        var body = {
			"ClientId":clientId,
			"ClientSecret":clientSecret
		};
        var endpoint = gs.getMessage(this.TOKEN_ENDPOINT,customer_id);
        logger.log(endpoint,"endpoint");
    		
		var retrys = 0;
		
		while(retrys < this.TOKEN_RETRY_MAX){
			try{
				var tokenResponse = rest.post(endpoint,this.TOKEN_HEADERS,body); 
				var tokenObj;
				tokenObj = JSON.parse(tokenResponse);
				var token = tokenObj.token;
				logger.log(token);
				return token;	
			}catch(error){
				logger.logError("Token Error");
				logger.logError(error);
				this._wait(1000);
				retrys++;
				logger.log("Failed to get token");
				logger.log("Token Retry " + retrys);
			}			
		}	
		logger.logError("Failed to get Token after " + retrys + " attempts");
		return null;
      
	},
	_getCurrentToken:function(){
		var logger = new Logger();
		var tokenRec = new GlideRecord('x_wcs_ctrx_auto_sv_security_token');
		tokenRec.query();
		if(tokenRec.next()){
			return tokenRec;
		}else{
			tokenRec = new GlideRecord('x_wcs_ctrx_auto_sv_security_token');
			tokenRec.insert();
			return tokenRec;
		}
	},
	
	_updateToken:function(tokenString,state,timestamp){
		var logger = new Logger();
		
		var tokenRec = new GlideRecord('x_wcs_ctrx_auto_sv_security_token');
		tokenRec.query();
		
		if(tokenRec.next()){
			tokenRec.setValue('token',tokenString);
			tokenRec.setValue('state',state);
			tokenRec.setValue('timestamp',timestamp);
			tokenRec.update();
		}else{
			logger.logError("Unable to find token record while updating token");
		}
	},

	_wait:function(time){
		
	   var t1 = new GlideDateTime().getNumericValue();
	   var t2 = new GlideDateTime().getNumericValue();

	   var duration = t2 - t1;

	   while(duration < time){
		 t2 = new GlideDateTime().getNumericValue();
		 duration = t2 - t1;
	   }
		
	},
	
    type: 'AuthToken'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>sebastiang</sys_created_by>
        <sys_created_on>2018-03-26 20:38:32</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>d028055adb855b84a7287bec0f9619c0</sys_id>
        <sys_mod_count>56</sys_mod_count>
        <sys_name>AuthToken</sys_name>
        <sys_package display_value="Citrix Automation Services" source="x_wcs_ctrx_auto_sv">790cd3e8db8513406d3c72fc0f961915</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Citrix Automation Services">790cd3e8db8513406d3c72fc0f961915</sys_scope>
        <sys_update_name>sys_script_include_d028055adb855b84a7287bec0f9619c0</sys_update_name>
        <sys_updated_by>sebastiang</sys_updated_by>
        <sys_updated_on>2018-04-05 20:08:24</sys_updated_on>
    </sys_script_include>
</record_update>
